Welcome to ASMLevel23
==================================================

To interact with any level you will send raw bytes over stdin to this program.
To efficiently solve these problems, first run it to see the challenge instructions.
Then craft, assemble, and pipe your bytes to this program.

For instance, if you write your assembly code in the file asm.S, you can assemble that to an object file:
  as -o asm.o asm.S

Note that if you want to use Intel syntax for x86 (which, of course, you do), you'll need to add the following to the start of asm.S:
  .intel_syntax noprefix

Then, you can copy the .text section (your code) to the file asm.bin:
  objcopy -O binary --only-section=.text asm.o asm.bin

And finally, send that to the challenge:
  cat ./asm.bin | /challenge/run

You can even run this as one command:
  as -o asm.o asm.S && objcopy -O binary --only-section=.text ./asm.o ./asm.bin && cat ./asm.bin | /challenge/run

We will now set some values in memory dynamically before each run. On each run
the values will change. This means you will need to do some type of formulaic
operation with registers. We will tell you which registers are set beforehand
and where you should put the result. In most cases, its rax.

In this level you will be working with control flow manipulation. This involves using instructions
to both indirectly and directly control the special register `rip`, the instruction pointer.
You will use instructions such as: jmp, call, cmp, and their alternatives to implement the requested behavior.



Recall that for all jumps, there are three types:
  Relative jumps
  Absolute jumps
  Indirect jumps

In this level we will ask you to do a relative jump.

You will need to fill space in your code with something to make this relative jump possible.

We suggest using the `nop` instruction. It's 1 byte long and very predictable.

In fact, the as assembler that we're using has a handy .rept directive that you can use to
repeat assembly instructions some number of times:
  https://ftp.gnu.org/old-gnu/Manuals/gas-2.9.1/html_chapter/as_7.html

Useful instructions for this level:
  jmp (reg1 | addr | offset) ; nop

Hint: for the relative jump, lookup how to use `labels` in x86.

Using the above knowledge, perform the following:
  Make the first instruction in your code a jmp
  Make that jmp a relative jump to 0x51 bytes from the current position
  At the code location where the relative jump will redirect control flow set rax to 0x1

We will now set the following in preparation for your code:
  Loading your given code at: 0x400087

Please give me your assembly in bytes (up to 0x1000 bytes): 
Executing your code...
---------------- CODE ----------------
0x400087:       jmp     0x4000da
0x400089:       nop   
0x40008a:       nop   
0x40008b:       nop   
0x40008c:       nop   
0x40008d:       nop   
0x40008e:       nop   
0x40008f:       nop   
0x400090:       nop   
0x400091:       nop   
0x400092:       nop   
0x400093:       nop   
0x400094:       nop   
0x400095:       nop   
0x400096:       nop   
0x400097:       nop   
0x400098:       nop   
0x400099:       nop   
0x40009a:       nop   
0x40009b:       nop   
0x40009c:       nop   
0x40009d:       nop   
0x40009e:       nop   
0x40009f:       nop   
0x4000a0:       nop   
0x4000a1:       nop   
0x4000a2:       nop   
0x4000a3:       nop   
0x4000a4:       nop   
0x4000a5:       nop   
0x4000a6:       nop   
0x4000a7:       nop   
0x4000a8:       nop   
0x4000a9:       nop   
0x4000aa:       nop   
0x4000ab:       nop   
0x4000ac:       nop   
0x4000ad:       nop   
0x4000ae:       nop   
0x4000af:       nop   
0x4000b0:       nop   
0x4000b1:       nop   
0x4000b2:       nop   
0x4000b3:       nop   
0x4000b4:       nop   
0x4000b5:       nop   
0x4000b6:       nop   
0x4000b7:       nop   
0x4000b8:       nop   
0x4000b9:       nop   
0x4000ba:       nop   
0x4000bb:       nop   
0x4000bc:       nop   
0x4000bd:       nop   
0x4000be:       nop   
0x4000bf:       nop   
0x4000c0:       nop   
0x4000c1:       nop   
0x4000c2:       nop   
0x4000c3:       nop   
0x4000c4:       nop   
0x4000c5:       nop   
0x4000c6:       nop   
0x4000c7:       nop   
0x4000c8:       nop   
0x4000c9:       nop   
0x4000ca:       nop   
0x4000cb:       nop   
0x4000cc:       nop   
0x4000cd:       nop   
0x4000ce:       nop   
0x4000cf:       nop   
0x4000d0:       nop   
0x4000d1:       nop   
0x4000d2:       nop   
0x4000d3:       nop   
0x4000d4:       nop   
0x4000d5:       nop   
0x4000d6:       nop   
0x4000d7:       nop   
0x4000d8:       nop   
0x4000d9:       nop   
0x4000da:       mov     rax, 1
--------------------------------------