Welcome to ASMLevel24
==================================================

To interact with any level you will send raw bytes over stdin to this program.
To efficiently solve these problems, first run it to see the challenge instructions.
Then craft, assemble, and pipe your bytes to this program.

For instance, if you write your assembly code in the file asm.S, you can assemble that to an object file:
  as -o asm.o asm.S

Note that if you want to use Intel syntax for x86 (which, of course, you do), you'll need to add the following to the start of asm.S:
  .intel_syntax noprefix

Then, you can copy the .text section (your code) to the file asm.bin:
  objcopy -O binary --only-section=.text asm.o asm.bin

And finally, send that to the challenge:
  cat ./asm.bin | /challenge/run

You can even run this as one command:
  as -o asm.o asm.S && objcopy -O binary --only-section=.text ./asm.o ./asm.bin && cat ./asm.bin | /challenge/run

We will now set some values in memory dynamically before each run. On each run
the values will change. This means you will need to do some type of formulaic
operation with registers. We will tell you which registers are set beforehand
and where you should put the result. In most cases, its rax.

In this level you will be working with control flow manipulation. This involves using instructions
to both indirectly and directly control the special register `rip`, the instruction pointer.
You will use instructions such as: jmp, call, cmp, and their alternatives to implement the requested behavior.



Now, we will combine the two prior levels and perform the following:
  Create a two jump trampoline:
    Make the first instruction in your code a jmp
    Make that jmp a relative jump to 0x51 bytes from its current position
    At 0x51 write the following code:
      Place the top value on the stack into register rdi
      jmp to the absolute address 0x403000

We will now set the following in preparation for your code:
  Loading your given code at: 0x4000d3
  (stack) [0x7fffff1ffff8] = 0xd2

Please give me your assembly in bytes (up to 0x1000 bytes): 
Executing your code...
---------------- CODE ----------------
0x4000d3:       jmp     0x400126
0x4000d5:       nop   
0x4000d6:       nop   
0x4000d7:       nop   
0x4000d8:       nop   
0x4000d9:       nop   
0x4000da:       nop   
0x4000db:       nop   
0x4000dc:       nop   
0x4000dd:       nop   
0x4000de:       nop   
0x4000df:       nop   
0x4000e0:       nop   
0x4000e1:       nop   
0x4000e2:       nop   
0x4000e3:       nop   
0x4000e4:       nop   
0x4000e5:       nop   
0x4000e6:       nop   
0x4000e7:       nop   
0x4000e8:       nop   
0x4000e9:       nop   
0x4000ea:       nop   
0x4000eb:       nop   
0x4000ec:       nop   
0x4000ed:       nop   
0x4000ee:       nop   
0x4000ef:       nop   
0x4000f0:       nop   
0x4000f1:       nop   
0x4000f2:       nop   
0x4000f3:       nop   
0x4000f4:       nop   
0x4000f5:       nop   
0x4000f6:       nop   
0x4000f7:       nop   
0x4000f8:       nop   
0x4000f9:       nop   
0x4000fa:       nop   
0x4000fb:       nop   
0x4000fc:       nop   
0x4000fd:       nop   
0x4000fe:       nop   
0x4000ff:       nop   
0x400100:       nop   
0x400101:       nop   
0x400102:       nop   
0x400103:       nop   
0x400104:       nop   
0x400105:       nop   
0x400106:       nop   
0x400107:       nop   
0x400108:       nop   
0x400109:       nop   
0x40010a:       nop   
0x40010b:       nop   
0x40010c:       nop   
0x40010d:       nop   
0x40010e:       nop   
0x40010f:       nop   
0x400110:       nop   
0x400111:       nop   
0x400112:       nop   
0x400113:       nop   
0x400114:       nop   
0x400115:       nop   
0x400116:       nop   
0x400117:       nop   
0x400118:       nop   
0x400119:       nop   
0x40011a:       nop   
0x40011b:       nop   
0x40011c:       nop   
0x40011d:       nop   
0x40011e:       nop   
0x40011f:       nop   
0x400120:       nop   
0x400121:       nop   
0x400122:       nop   
0x400123:       nop   
0x400124:       nop   
0x400125:       nop   
0x400126:       pop     rdi
0x400127:       mov     rbx, 0x403000
0x40012e:       jmp     rbx
--------------------------------------